debug: false
# Springframework設定
spring: 
  application.name: container-app
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres
    hikari:
      maximum-pool-size: 1
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: create
  profiles:
    default: jpa

# actuator設定
management:
  endpoints:
    web:
      exposure:
        include: "*"
        exclude: "env,beans"
  metrics:
    tags:
      application: server_app
      instance: "host.docker.internal:8080"
    distribution:
      percentiles-histogram:
        http.server.requests: true
  tracing:
    sampling:
      probability: 1.0
  # =======
  # ＜TelemetryパイプラインはOTEL+HTTPの標準的な構成＞
  # metrics(micrometer-registry-otlp) ------------(http)--┐                ┌-- (http://prometheus:9090/api/v1/otlp) -> Prometheus/otlp-receiver
  # tracing(micrometer-tracing-bridge-otel) ------(http)--├--> collector --┤-- (http://tempo:4418) ------------------> Grafana Tempo
  # logging(opentelemetry-logback-appender-1.0) --(http)--┘                └-- (http://loki:3100/otlp) --------------> Grafana Loki
  # =======
  otlp:
    tracing:
      endpoint: "http://localhost:4318/v1/traces"
    metrics:
      export:
        url: "http://localhost:4318/v1/metrics"
        step: 2s
    logging:
      endpoint: "http://localhost:4318/v1/logs"

# ログ設定
logging:
  level:
    org.springframework.boot.logging: TRACE
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
